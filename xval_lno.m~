%% Build Tensors

% Add master folders
addpath(genpath('./../'))
addpath(genpath('./'))

% Load PRE-PROCESSED data
data_folder = '/nfs/ghome/live/hugos/Documents/project_tensors/data_sepi/';
resu_folder = '/nfs/ghome/live/hugos/Documents/project_tensors/dresults/';

%data_folder = '/Users/apple/Documents/code_gatsby/data_sepi/';
%resu_folder = '/Users/apple/Documents/code_gatsby/dresults/';
load([data_folder,'data_sepim']);

% Experimental Condition ID
trial_cond=data_sepim.trial_cond;
exp_cond = unique(trial_cond);

% Unfold trials and Separate XP conditions
data_sepim_unfolded = unfold_bin(data_sepim);

% Convert The recorded Region Into an int array
RegionDict =  unique(data_sepim_unfolded.record_region);
RegionId   = grp2idx(data_sepim_unfolded.record_region);
data_sepim_unfolded.record_region = RegionId;
data_sepim_unfolded.record_region_dict = RegionDict;

% Convert The recorded Region Into an int array
LayerDict =  unique(data_sepim_unfolded.record_layr);
LayerId   = grp2idx(data_sepim_unfolded.record_layr);
data_sepim_unfolded.record_layr = LayerId;
data_sepim_unfolded.record_layr_dict = LayerDict;

% Convert The cell TypeInto an int array
CellTDict =  unique(data_sepim_unfolded.record_ctype);
CellTId   = grp2idx(data_sepim_unfolded.record_ctype);
data_sepim_unfolded.record_ctype = CellTId;
data_sepim_unfolded.record_ctype_dict = CellTDict;

% Get data XP cond wise
data_vest = get_cond_data(data_sepim_unfolded, exp_cond(1));
data_visu = get_cond_data(data_sepim_unfolded, exp_cond(2));
data_vevi = get_cond_data(data_sepim_unfolded, exp_cond(3));

% Get some XP variable of interest
posit_temp = reshape_data_bins(data_vest,'posit_deg');
speed_temp = reshape_data_bins(data_vest,'speed_deg');
posit_eg = posit_temp(:,1);
speed_eg = speed_temp(:,1);
speed_check   = permute(reshape_data_bin_trial(data_vevi,'speed_deg'), [2,1,3]);
record_region = permute(reshape_data_bin_trial(data_vest,'record_region'), [2,1,3]);
record_layr   = permute(reshape_data_bin_trial(data_vest,'record_layr'), [2,1,3]);
record_ctype  = permute(reshape_data_bin_trial(data_vest,'record_ctype'), [2,1,3]);
dict_region = data_sepim_unfolded.record_region_dict;
dict_layr   = data_sepim_unfolded.record_layr_dict;
dict_ctype  = data_sepim_unfolded.record_ctype_dict;


% Get Firing Rates
frate_vest_trials = permute(reshape_data_bin_trial(data_vest,'fir_rate'), [2,1,3]);
frate_visu_trials = permute(reshape_data_bin_trial(data_visu,'fir_rate'), [2,1,3]);
frate_vevi_trials = permute(reshape_data_bin_trial(data_vevi,'fir_rate'), [2,1,3]);

% If necessary flip the visual only in time
%frate_visu_trials = flip(frate_visu_trials,2);

k_vest = size(frate_vest_trials,3);
k_visu = size(frate_visu_trials,3);
k_vevi = size(frate_vevi_trials,3);

% Limit the analysis to same # of XP in all conditions
use_same_k_trial =1;
if use_same_k_trial
    k_trial= min([k_vest,k_visu,k_vevi]);
    
    frate_vest_trials = frate_vest_trials(:,:,1:k_trial);
    frate_visu_trials = frate_visu_trials(:,:,1:k_trial);
    frate_vevi_trials = frate_vevi_trials(:,:,1:k_trial);
    
    record_region  = record_region(:,:,1:k_trial);
    record_layr    = record_layr(:,:,1:k_trial);
    record_ctype   = record_ctype(:,:,1:k_trial);
    
    
    %     frate_vest_trials(335,:,:) = [];
    %     frate_visu_trials(335,:,:) = [];
    %     frate_vevi_trials(335,:,:) = [];
    %
    %     record_region(335,:) = [];
    %     record_layr(335,:) = [];
    %     record_ctype(335,:) = [];
    %
    
    speed_check = speed_check(:,:,1:k_trial);
    
    k_vest = k_trial;
    k_visu = k_trial;
    k_vevi = k_trial;
end



% Get Recording Region and Layer for each Independent cell
assert(all(all(all(record_region-record_region(:,1,1) == 0))))
record_region = record_region(:,1,1);
assert(all(all(all(record_layr-record_layr(:,1,1) == 0))))
record_layr = record_layr(:,1,1);
assert(all(all(all(record_ctype-record_ctype(:,1,1) == 0))))
record_ctype = record_ctype(:,1,1);


% Time Points
T = size(frate_vest_trials,2);

% Independent Cells
N = size(frate_vest_trials,1);

% Experimental conditions
L = 3;

% Quick Sanity check
assert(T==size(frate_visu_trials,2)); assert(T==size(frate_vevi_trials,2))
assert(N==size(frate_visu_trials,1)); assert(N==size(frate_vevi_trials,1))


Xobs = zeros(N,T,L,k_trial);
Xobs(:,:,1,:) = frate_vest_trials;
Xobs(:,:,2,:) = frate_visu_trials;
Xobs(:,:,3,:) = frate_vevi_trials;
Xobs = Xobs/10;



%% Fit Parameters

% Sizes for outer and inner folder of nested cross validation (LOO if = 1)
k_test = 5;   % Size of the test set
k_max  = 12;  % Number of folders


n_test = 1;   % Number of Leave Neuron Out 
N_test = 40;  % Number of LNO tests;

% Get outer folder ids
ids = 1:size(Xobs,4);
[test_folder_outer, train_folder_outer] = xval_idx(ids,k_test,k_max);


% Shared Parameters
% Fit set up
ite_max        = 3500;

fit_decomp_dim = [1,1,1,1];
fit_offset_dim = [1,0,1,0];
fit_decomp_lag = 400;
convthr        = 1e-12;
disppct        = -1;
model_strt      = 'poisson';

% Gradient steps 
rho_offset     = 1e-2*ones(1,ite_max); rho_offset(1:100) = 1e-5;
rho_decomp     = 5e-3*ones(1,ite_max);

% Shared Structure
fit_param =struct();
fit_param.model = model_strt;
fit_param.disppct = disppct;
fit_param.ite_max = ite_max;
fit_param.convthr = convthr;
fit_param.rho_offset = rho_offset;
fit_param.rho_decomp = rho_decomp;
fit_param.fit_decomp_lag = fit_decomp_lag;
fit_param.fit_decomp_dim = fit_decomp_dim;
fit_param.fit_offset_dim = fit_offset_dim;

% Optimizer
opt = 'ADAMNC';

% GCP
beta1 = 0.9;
beta2 = 0.999;
fit_param_gcp = fit_param;
fit_param_gcp.beta1 = beta1;
fit_param_gcp.beta2 = beta2;
fit_param_gcp.opt   = opt;
%fit_param_gcp.R       = R; %R = 4;


% GCANDELINC
Xobsd = Xobs(:,:,:,train_folder_outer(1,:));
Pk = cell(1,length(size(Xobsd)));for k=1:length(size(Xobsd));Pk{1,k} = eye(size(Xobsd,k));end
Pk{1,4} = ones(size(Xobsd,4),1);
fit_param_gcl = fit_param_gcp;
fit_param_gcl.Pk = Pk;

% MLR
fit_param_mlr = fit_param;
%fit_param_mlr.lambda = lambda; %lambda = 1*[1,0,0,0];

% TCP
fit_param_tcp=struct();
tcp_param_tcp.ite_max = ite_max;
%tcp_param.R = R;

% TGCP
fit_param_tgcp = struct();
fit_param_tgcp.t = fit_param_mlr;
fit_param_tgcp.g = fit_param_gcp;


%% Hyperparameters


model_str = {'MLR','TCP1','TGCPobs1','TGCPhat1','TCP2','TGCPobs2','TGCPhat2','GCP','GCANDELINC'};

fit_param_tot = cell(1,size(model_str,2));
fit_param_tot{1,1} = fit_param_mlr;
fit_param_tot{1,2} = fit_param_tcp;
fit_param_tot{1,3} = fit_param_tgcp;
fit_param_tot{1,4} = fit_param_tgcp;
fit_param_tot{1,5} = fit_param_tcp;
fit_param_tot{1,6} = fit_param_tgcp;
fit_param_tot{1,7} = fit_param_tgcp;
fit_param_tot{1,8} = fit_param_gcp;
fit_param_tot{1,9} = fit_param_gcl;


lambda12 = [0.1; 0.06] * [1,0,0,0];
Nhyperparams = 10;
hyperparams = cell(3,size(model_str,2));
hyperparams{1,1} = linspace(0.05,0.2,Nhyperparams);

for nmodel=2:size(model_str,2)
    hyperparams{1,nmodel} = floor(linspace(1,15,Nhyperparams));
end

%%



%%

Dtot = cell(1,size(test_folder_outer,1));
NMLR = cell(1,size(test_folder_outer,1));
disp('0')
parfor folder_id= 1:size(test_folder_outer,1)

    
    cur_test_folders  = test_folder_outer(folder_id,:);
    cur_train_folders = train_folder_outer(folder_id,:);
    
    Xobs_train = Xobs(:,:,:,cur_train_folders);
    Xobs_test  = Xobs(:,:,:,cur_test_folders);
    
    % Preliminary MLR for TGCP and TCP
    fit_param_mlr_prelim1 = fit_param_mlr;
    fit_param_mlr_prelim2 = fit_param_mlr;
    fit_param_mlr_prelim1.lambda = lambda12(1,:);
    fit_param_mlr_prelim2.lambda = lambda12(2,:);
    disp(['Folder: ', num2str(folder_id), '/', num2str(size(test_folder_outer,1)), ' MLR TMP 1'])
    results_mlr_prelim1 = tensor_mlr(Xobs_train,fit_param_mlr_prelim1);
    disp(['Folder: ', num2str(folder_id), '/', num2str(size(test_folder_outer,1)), ' MLR TMP 2'])
    results_mlr_prelim2 = tensor_mlr(Xobs_train,fit_param_mlr_prelim2);
    
    
    D_folder_test = zeros(size(model_str,2),length(hyperparams{1,1}), N_test, n_test );
    D_folder_train = zeros(size(model_str,2),length(hyperparams{1,1}), 1);
    
    
    N_MLR_folder =  zeros(length(hyperparams{1,1}), ndims(Xobs_test));
    
    
    for hyperparam_id = 1:length(hyperparams{1,1})
        
        perm_tot = zeros(N_test,n_test);

        if N_test==size(Xobs_train,1) && n_test==1
            perm_tot = (1:N_test)';
        else
            for nn = 1:N_test
                perm_tot(nn,:) = randperm(N,n_test);
            end
        end
        
        
        
        for nmodel=1:size(model_str,2)   
            disp(['Folder: ', num2str(folder_id), '/', num2str(size(test_folder_outer,1)),  ' HP: ', num2str(hyperparam_id), '/', num2str(length(hyperparams{1,1})),' ', model_str{1,nmodel}])
            model_cur = model_str{1,nmodel};
            fit_hyperparam_cur = cell(1,3);
            fit_hyperparam_cur{1,1} = hyperparams{1,nmodel}(1,hyperparam_id); % R or lambda depending on model
            fit_hyperparam_cur{1,2} = results_mlr_prelim1; % used only for TCP1 and TGCP1
            fit_hyperparam_cur{1,3} = results_mlr_prelim2; % used only for TCP1 and TGCP1
            
            fit_param_cur = fit_param_tot{1,nmodel};
            results = tensor_wrapper(Xobs_train,model_cur,fit_param_cur,fit_hyperparam_cur);
           
            D_folder_train(nmodel, hyperparam_id) = deviance_poisson(Xobs_train,results.fit.Xhat);
            
            if strcmp(model_cur,'MLR')
                N_MLR_folder(hyperparam_id,:) = results.fit.Nhat;
            end
            
            for nn = 1:N_test
                 idtest = perm_tot(nn,:);
                 idtrain = 1:size(Xobs_test,1); idtrain(idtest) =[];
                 Xtesti = tensor_remove(Xobs_test,1,idtrain);
                 Xpredi = lno_wrapper(results,model_cur,idtrain,idtest,Xobs_test);
                 D = deviance_poisson_nwise(Xtesti, Xpredi);
                 D_folder_test(nmodel, hyperparam_id, nn,:) = D;
         
            end
             
        end
    end

    Dtot{1,folder_id}.Dtrain = D_folder_train;
    Dtot{1,folder_id}.Dtest  = D_folder_test;
    NMLR{1,folder_id} = N_MLR_folder;
    
end


filename = [resu_folder,'xval_lno_' ,datestr(now,'yyyy_mm_dd_HH_MM')];
save(filename,'Dtot','hyperparams','NMLR')



%%
cmap = colorm(9);






model_str = {'MLR','TCP1','TGCPobs1','TGCPhat1','TCP2','TGCPobs2','TGCPhat2','GCP','GCANDELINC'};

cmap  = colorm(size(model_str,2));
hpval = hyperparams;



Dtot



%%




Nmodel  = size(Dtot{1,1}.Dtrain,1);
Nhpss   = size(Dtot{1,1}.Dtrain,2);

cmap  = colorm(Nmodel);
model_str = {'MLR','TCP1','TGCPobs1','TGCPhat1','TCP2','TGCPobs2','TGCPhat2','GCP','GCANDELINC'};


NMLR_1t = zeros(size(NMLR,2), size(NMLR{1,1},1));
for folder_id=1:size(NMLR,2)
    NMLR_1t(folder_id,:) = NMLR{1,folder_id}(:,1);
end
NMLR_avg = mean(NMLR_1t,1);

hpvs = zeros(Nmodel,Nhpss);
for nmodel=2:Nmodel
    hpvs(nmodel,:) = hyperparams{1,nmodel};
end
hpvs(1,:) =NMLR_avg;


%%
Dtrain_tot = zeros([size(Dtot,2),size(Dtot{1,1}.Dtrain)]);
Dtests_tot = zeros([size(Dtot,2),size(Dtot{1,1}.Dtest)]);
for folder_id = 1:size(Dtot,2)
    Dtrain_tot(folder_id, :,:) =  Dtot{1,folder_id}.Dtrain;
    Dtests_tot(folder_id, :,:,:,:) = Dtot{1,folder_id}.Dtest;
end

Dtrain_tot = permute(Dtrain_tot, [2,3,1]);
Dtests_tot = permute(Dtests_tot, [2,3,1,4,5]);


%%



figure
hold on

nmodel = 8;
nfolde = 4;
Dcur = squeeze(sum(Dtests_tot(nmodel,:,:,:),3));
plot(1:10,mean(Dcur,2),'color', 'k', 'linewidth', 1.2 )
plot(1:10,mean(Dcur,2)+ std(Dcur')' ,'color', 'k', 'linewidth', 1.2,'linestyle','-.' )
plot(1:10,mean(Dcur,2)- std(Dcur')' ,'color', 'k', 'linewidth', 1.2,'linestyle','-.' )




nmodel = ;
nfolde = 4;
Dcur = squeeze(sum(Dtests_tot(nmodel,:,:,:),3));
plot(1:10,mean(Dcur,2),'color', 'r', 'linewidth', 1.2 )
plot(1:10,mean(Dcur,2)+ std(Dcur')' ,'color', 'r', 'linewidth', 1.2,'linestyle','-.' )
plot(1:10,mean(Dcur,2)- std(Dcur')' ,'color', 'r', 'linewidth', 1.2,'linestyle','-.' )


%%
p=[];
figure
subplot(1,2,1); hold on
for nmodel=1:size(Dtrain_tot,1)
    pp= plot(hpvs(nmodel,:),squeeze(median(Dtrain_tot(nmodel,:,:),3)) , 'linewidth',1.4,'color', cmap(nmodel,:));
    scatter(hpvs(nmodel,:),squeeze(median(Dtrain_tot(nmodel,:,:),3)) ,30, cmap(nmodel,:))
    p=[p,pp];
end
box on
legend(p,model_str)


subplot(1,2,2); hold on
for nmodel=1:size(Dtrain_tot,1)
    
   Dtests_cur =  tensor_unfold(squeeze(Dtests_tot(nmodel,:,:,:)),1);
   plot(hpvs(nmodel,:),median(Dtests_cur,2), 'linewidth',1.4,'color', cmap(nmodel,:));
   scatter(hpvs(nmodel,:),median(Dtests_cur,2) ,30, cmap(nmodel,:))
   
end
xlim([1 15])

%%

%%
Dtests_tot2 = permute(Dtests_tot,[1,4,3,2,5]);
Dtests_tot2 = Dtests_tot;
aa = squeeze(Dtests_tot2(9,:,:,:,:));

bb = tensor_unfold(aa,1);

figure
plot(1:10,mean(bb,2))

%%

%D_folder = zeros(size(model_str,2),length(hyperparams{1,1}), N_test, n_test );

DDtot = zeros([size(Dtot,2), size(Dtot{1,1})]);

for folder_id = 1:size(Dtot,2)
    DDtot(folder_id,:,:,:,:) = Dtot{1,folder_id};
end


DDtot = permute(DDtot, [3,2,1,4,5]);
DDtot = sum(sum(sum(DDtot,5),4),3)';


colorrr = [linspace(0,1,9)',linspace(1,0,9)',0.4*linspace(0,1,9)'];

figure; hold on
for nn=1:9
plot(1:size(DDtot,2), DDtot(nn,:), 'linewidth',1.4,'color', cmap(nn,:))
end
ylim([40000, 50000])
legend(model_str)




%%


nnn =1;
aaa = sum(sum(Dtot{1,nnn},4),3);

figure; hold on
for nn=9
plot(1:10,aaa(nn,:)', 'linewidth',1.4,'color', cmap(nn,:))
end
ylim([30000, 50000])
%legend(model_str)

%%


DMMtot = median(DMtot,4);
DMMtot = median(DMMtot,3);


%%






%% Helpers



function conditionned_struct = get_cond_data(data, condition)

conditionned_struct = struct();
trial_cond=data.trial_cond;
exp_cond_id = find(trial_cond == condition); % Vestibular;
conditionned_struct.id_tot        = data.id_tot(exp_cond_id);
conditionned_struct.exp_id        = data.exp_id(exp_cond_id);
conditionned_struct.cell_id       = data.cell_id(exp_cond_id);
conditionned_struct.bin_id        = data.bin_id(exp_cond_id);
conditionned_struct.trial_id      = data.trial_id(exp_cond_id);
conditionned_struct.posit_deg     = data.posit_deg(exp_cond_id);
conditionned_struct.speed_deg     = data.speed_deg(exp_cond_id);
conditionned_struct.fir_rate      = data.fir_rate(exp_cond_id);
conditionned_struct.trial_cond    = data.trial_cond(exp_cond_id);
conditionned_struct.record_region = data.record_region(exp_cond_id);
conditionned_struct.record_layr   = data.record_layr(exp_cond_id);
conditionned_struct.record_ctype  = data.record_ctype(exp_cond_id);

end







